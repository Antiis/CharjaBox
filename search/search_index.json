{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CharjaBox Ansible based Homeserver setup using Docker. Inspired by Ansible NAS and HomelabOS What is this? CharjaBox is an Ansible playbook that can be used to easily deploy your Homeserver setup. All supported applications can be installed on your server using Docker by simply changing some variables and running the playbook. Read the documentation here . Features Samba Sharing Manual container management using Portainer Home Media Streaming with Plex, Jellyfin and/or Airsonic Media management with Sonarr, Radarr and Lidarr Torrenting via r(u)Torrent Your own wiki using Dokuwiki macOS backups over the network with Time machine over SMB Personal Finance management with Firefly III Local DNS management with BIND Hosting your own git repositories Download caching for many CDNs Password management and more... Applications Airsonic - Free, web-based media streamer, providing ubiquitous access to your music Bazarr - Companion application to Sonarr and Radarr for downloading subtitles BIND - Domain Name Server for your home network Bitwarden_rs - Password manager compatible with Bitwarden apps Dokuwiki - Simple to use and highly versatile Open Source wiki software that doesn't require a database Firefly III - Free and open source personal finance manager Gitea - Git with a cup of tea Heimdall - Application Dashboard for easy access to all your services Jackett - API Support for your favorite torrent trackers. Jellyfin - The Free Software Media System Lancache - Cache your video game downloads and operating system updates so you only have to download them once Lidarr - Manage your music collection Nginx - Open source web server and a reverse proxy server Plex - Your very own personal streaming service Portainer - Web Interface for managing Docker containers Radarr - Manage your movie collection rtorrent - Text-based ncurses BitTorrent client ruTorrent - Web front-end for the popular Bittorrent client rtorrent Sonarr - Manage your TV collection Time machine - Backup your macOS devices over the network Traefik - Automate reverse proxy access to your server Installation Make sure all Requirements are met Clone the repository and cd into the directory Copy the settings for the applications you want to use and the charjabox_general.yml file from settings/defaults/ to settings/charjabox and configure everything Create an inventory file and add your server's IP/Hostname/Domain Install needed roles: ansible-galaxy install -r requirements.yml Run the playbook: ansible-playbook -i inventory -u $USER charjabox.yml You can use the playbook charjabox/scripts/initialize.yml to skip part of steps 3 and 4. This playbook asks you about your server IP, group name and settings folder and creates the files for you automatically. You still need to do it manually if you want to use multiple servers for now. This functionality will be added to the script in the future. Special Thanks Thanks to DysphoricUnicorn for designing our beautiful mascot.","title":"Home"},{"location":"#charjabox","text":"Ansible based Homeserver setup using Docker. Inspired by Ansible NAS and HomelabOS","title":"CharjaBox"},{"location":"#what-is-this","text":"CharjaBox is an Ansible playbook that can be used to easily deploy your Homeserver setup. All supported applications can be installed on your server using Docker by simply changing some variables and running the playbook. Read the documentation here .","title":"What is this?"},{"location":"#features","text":"Samba Sharing Manual container management using Portainer Home Media Streaming with Plex, Jellyfin and/or Airsonic Media management with Sonarr, Radarr and Lidarr Torrenting via r(u)Torrent Your own wiki using Dokuwiki macOS backups over the network with Time machine over SMB Personal Finance management with Firefly III Local DNS management with BIND Hosting your own git repositories Download caching for many CDNs Password management and more...","title":"Features"},{"location":"#applications","text":"Airsonic - Free, web-based media streamer, providing ubiquitous access to your music Bazarr - Companion application to Sonarr and Radarr for downloading subtitles BIND - Domain Name Server for your home network Bitwarden_rs - Password manager compatible with Bitwarden apps Dokuwiki - Simple to use and highly versatile Open Source wiki software that doesn't require a database Firefly III - Free and open source personal finance manager Gitea - Git with a cup of tea Heimdall - Application Dashboard for easy access to all your services Jackett - API Support for your favorite torrent trackers. Jellyfin - The Free Software Media System Lancache - Cache your video game downloads and operating system updates so you only have to download them once Lidarr - Manage your music collection Nginx - Open source web server and a reverse proxy server Plex - Your very own personal streaming service Portainer - Web Interface for managing Docker containers Radarr - Manage your movie collection rtorrent - Text-based ncurses BitTorrent client ruTorrent - Web front-end for the popular Bittorrent client rtorrent Sonarr - Manage your TV collection Time machine - Backup your macOS devices over the network Traefik - Automate reverse proxy access to your server","title":"Applications"},{"location":"#installation","text":"Make sure all Requirements are met Clone the repository and cd into the directory Copy the settings for the applications you want to use and the charjabox_general.yml file from settings/defaults/ to settings/charjabox and configure everything Create an inventory file and add your server's IP/Hostname/Domain Install needed roles: ansible-galaxy install -r requirements.yml Run the playbook: ansible-playbook -i inventory -u $USER charjabox.yml You can use the playbook charjabox/scripts/initialize.yml to skip part of steps 3 and 4. This playbook asks you about your server IP, group name and settings folder and creates the files for you automatically. You still need to do it manually if you want to use multiple servers for now. This functionality will be added to the script in the future.","title":"Installation"},{"location":"#special-thanks","text":"Thanks to DysphoricUnicorn for designing our beautiful mascot.","title":"Special Thanks"},{"location":"configuration/","text":"Configuration Configuration is done in multiple files in a group-specific subfolder of the settings folder. By default the directory settings/charjabox/ is used if you don't specify a different path. You should never touch the settings/defaults/ folder in normal use. You only need to add the settings that you actually change to your settings folder. If you do this by copying the whole files over from settings/defaults/ or by creating your own files with just the variables you need is up to you. Every file ending in .yml inside of settings/$YOURSETTINGS will be recognized by CharjaBox. If you use CharjaBox to set up multiple servers, you can use different settings folders for every server. To do this, set different hostnames or groups for your different servers in your Inventory and create host_vars/$HOSTNAME or group_vars/$GROUPNAME files for each server/group. In those files you can change the charjabox_settings_path variable and set your settings in a folder inside of settings/ with the same name as the variable. General charjabox_general.yml includes all general configuration about your server, like Hostnames, Timezones, etc. charjabox_ports.yml includes all the ports for the applications in one place. Application Settings Every application has it's own settings file, where you can enable the Application and apply App-specific configuration. Example I have a local server currently running Portainer, Heimdall, Nginx and Plex. I called the group production to differentiate it from a testing server. The inventory file looks like this: [production] 192.168.1.22 [testing] 192.168.1.33 [someothergroup] 192.168.1.42 The group name production tells Ansible to look for the file group_vars/production.yml , which looks like this: charjabox_settings_path: \"production\" This variable tells the playbook to look for custom variables in settings/production , where I have the following files containing custom settings: charjabox_general.yml heimdall.yml nginx.yml plex.yml portainer.yml","title":"Configuration"},{"location":"configuration/#configuration","text":"Configuration is done in multiple files in a group-specific subfolder of the settings folder. By default the directory settings/charjabox/ is used if you don't specify a different path. You should never touch the settings/defaults/ folder in normal use. You only need to add the settings that you actually change to your settings folder. If you do this by copying the whole files over from settings/defaults/ or by creating your own files with just the variables you need is up to you. Every file ending in .yml inside of settings/$YOURSETTINGS will be recognized by CharjaBox. If you use CharjaBox to set up multiple servers, you can use different settings folders for every server. To do this, set different hostnames or groups for your different servers in your Inventory and create host_vars/$HOSTNAME or group_vars/$GROUPNAME files for each server/group. In those files you can change the charjabox_settings_path variable and set your settings in a folder inside of settings/ with the same name as the variable.","title":"Configuration"},{"location":"configuration/#general","text":"charjabox_general.yml includes all general configuration about your server, like Hostnames, Timezones, etc. charjabox_ports.yml includes all the ports for the applications in one place.","title":"General"},{"location":"configuration/#application-settings","text":"Every application has it's own settings file, where you can enable the Application and apply App-specific configuration.","title":"Application Settings"},{"location":"configuration/#example","text":"I have a local server currently running Portainer, Heimdall, Nginx and Plex. I called the group production to differentiate it from a testing server. The inventory file looks like this: [production] 192.168.1.22 [testing] 192.168.1.33 [someothergroup] 192.168.1.42 The group name production tells Ansible to look for the file group_vars/production.yml , which looks like this: charjabox_settings_path: \"production\" This variable tells the playbook to look for custom variables in settings/production , where I have the following files containing custom settings: charjabox_general.yml heimdall.yml nginx.yml plex.yml portainer.yml","title":"Example"},{"location":"contributing/","text":"Contributing There are many ways to contribute to CharjaBox. Everything helps! Requesting an Application If you want to request an Application, please open an Issue and use the correct issue template. Adding new Applications To add a new application, you can use an existing app as a template. You will need to create the following files: settings/defaults/$appname.yml # For the settings roles/$appname/tasks/main.yml # The main task for the app roles/$appname/templates/$appname.service.j2 # Systemd Service file roles/$appname/templates/docker-compose.$appname.j2 # Docker-compose file You will also need to edit the following files: charjabox.yml # To add the role to the playbook settings/defaults/charjabox_ports.yml # To configure the ports Please also add documentation for the new app in docs/applications/$appname and README.md , as well as docs/index.md","title":"Contributing"},{"location":"contributing/#contributing","text":"There are many ways to contribute to CharjaBox. Everything helps!","title":"Contributing"},{"location":"contributing/#requesting-an-application","text":"If you want to request an Application, please open an Issue and use the correct issue template.","title":"Requesting an Application"},{"location":"contributing/#adding-new-applications","text":"To add a new application, you can use an existing app as a template. You will need to create the following files: settings/defaults/$appname.yml # For the settings roles/$appname/tasks/main.yml # The main task for the app roles/$appname/templates/$appname.service.j2 # Systemd Service file roles/$appname/templates/docker-compose.$appname.j2 # Docker-compose file You will also need to edit the following files: charjabox.yml # To add the role to the playbook settings/defaults/charjabox_ports.yml # To configure the ports Please also add documentation for the new app in docs/applications/$appname and README.md , as well as docs/index.md","title":"Adding new Applications"},{"location":"installation/","text":"Installation Make sure all Requirements are met Clone the repository and cd into the directory Copy the settings for the applications you want to use and the charjabox_general.yml file from settings/defaults/ to settings/charjabox and configure everything Create an inventory file and add your server's IP/Hostname/Domain Install needed roles: ansible-galaxy install -r requirements.yml Run the playbook: ansible-playbook -i inventory -u $USER charjabox.yml You can use the playbook charjabox/scripts/initialize.yml to skip part of steps 3 and 4. This playbook asks you about your server IP, group name and settings folder and creates the files for you automatically. You still need to do it manually if you want to use multiple servers for now. This functionality will be added to the script in the future.","title":"Installation"},{"location":"installation/#installation","text":"Make sure all Requirements are met Clone the repository and cd into the directory Copy the settings for the applications you want to use and the charjabox_general.yml file from settings/defaults/ to settings/charjabox and configure everything Create an inventory file and add your server's IP/Hostname/Domain Install needed roles: ansible-galaxy install -r requirements.yml Run the playbook: ansible-playbook -i inventory -u $USER charjabox.yml You can use the playbook charjabox/scripts/initialize.yml to skip part of steps 3 and 4. This playbook asks you about your server IP, group name and settings folder and creates the files for you automatically. You still need to do it manually if you want to use multiple servers for now. This functionality will be added to the script in the future.","title":"Installation"},{"location":"requirements/","text":"Requirements Before you set up CharjaBox, make sure you have the following: A running Ubuntu 18.04 server, preferably a clean installation A user on that server with sudo access and a working SSH public key The corresponding SSH private key on your local machine","title":"Requirements"},{"location":"requirements/#requirements","text":"Before you set up CharjaBox, make sure you have the following: A running Ubuntu 18.04 server, preferably a clean installation A user on that server with sudo access and a working SSH public key The corresponding SSH private key on your local machine","title":"Requirements"},{"location":"applications/airsonic/","text":"Airsonic Airsonic - Free, web-based media streamer, providing ubiquitous access to your music After enabling Airsonic, immediately visit the Webinterface (default port 4040), login with admin:admin and change the password. All settings are changed via the Webinterface.","title":"Airsonic"},{"location":"applications/airsonic/#airsonic","text":"Airsonic - Free, web-based media streamer, providing ubiquitous access to your music After enabling Airsonic, immediately visit the Webinterface (default port 4040), login with admin:admin and change the password. All settings are changed via the Webinterface.","title":"Airsonic"},{"location":"applications/bazarr/","text":"Bazarr Bazarr - Companion application to Sonarr and Radarr for downloading subtitles Bazarr uses the paths set in charjabox_tv_directory and charjabox_movies_directory in charjabox_general.yml to access your TV and movie collections. The subtitles get downloaded to the same directory as your media files.","title":"Bazarr"},{"location":"applications/bazarr/#bazarr","text":"Bazarr - Companion application to Sonarr and Radarr for downloading subtitles Bazarr uses the paths set in charjabox_tv_directory and charjabox_movies_directory in charjabox_general.yml to access your TV and movie collections. The subtitles get downloaded to the same directory as your media files.","title":"Bazarr"},{"location":"applications/bind/","text":"BIND BIND - Domain Name Server for your home network Please note that BIND requires some additional setup after installing. For reference you can use the second half of this tutorial and the BIND documentation . The docker container used for BIND comes with an instance of Webmin to make management of your DNS easier. You can disable this by setting bind_webmin_enabled to \"false\" . BIND has to run on port 53 for DNS to work. The Webinterface port can be set by changing bind_webmin_port .","title":"BIND"},{"location":"applications/bind/#bind","text":"BIND - Domain Name Server for your home network Please note that BIND requires some additional setup after installing. For reference you can use the second half of this tutorial and the BIND documentation . The docker container used for BIND comes with an instance of Webmin to make management of your DNS easier. You can disable this by setting bind_webmin_enabled to \"false\" . BIND has to run on port 53 for DNS to work. The Webinterface port can be set by changing bind_webmin_port .","title":"BIND"},{"location":"applications/bitwarden_rs/","text":"Bitwarden_rs Bitwarden_rs - Password manager compatible with Bitwarden apps Enable/Disable registrations To disable open registrations and/or invites set bitwarden_rs_signups_allowed and/or bitwarden_rs_invites_allowed to false . Disabling signups does not automatically disable invites. Admin interface To enable the Admin webinterface, set bitwarden_rs_admintoken to a secure password. When this is set you access the admin interface at /admin . Websocket notifications To enable WebSockets notifications, an external reverse proxy is necessary, and it must be configured to do the following: - Route the /notifications/hub endpoint to the WebSocket server, by default at port 3012 , making sure to pass the Connection and Upgrade headers. (Note the port can be changed with WEBSOCKET_PORT variable) - Route everything else, including /notifications/hub/negotiate , to the standard Rocket server, by default at port 9001 . Then you need to enable WebSockets negotiation on the bitwarden_rs side by setting the bitwarden_rs_websocket_enabled variable to true . More information here Email To activate the e-mail functionality of bitwarden_rs you need to configure an smtp server connection. First, set bitwarden_rs_smtp_enabled to true , then configure the following variables, according to your existing smtp server: bitwarden_rs_smtp_host: \"\" bitwarden_rs_smtp_from: \"\" bitwarden_rs_smtp_port: \"\" bitwarden_rs_smtp_ssl: \"\" bitwarden_rs_smtp_username: \"\" bitwarden_rs_smtp_password: \"\" More information here . Yubikey OTP authentication To enable YubiKey authentication, you must set the variables bitwarden_rs_yubikey_server , bitwarden_rs_yubikey_id and bitwarden_rs_yubikey_key to a valid configuration, then enable it by setting bitwarden_rs_yubikey_enabled: true More information here","title":"Bitwarden_rs"},{"location":"applications/bitwarden_rs/#bitwarden_rs","text":"Bitwarden_rs - Password manager compatible with Bitwarden apps","title":"Bitwarden_rs"},{"location":"applications/bitwarden_rs/#enabledisable-registrations","text":"To disable open registrations and/or invites set bitwarden_rs_signups_allowed and/or bitwarden_rs_invites_allowed to false . Disabling signups does not automatically disable invites.","title":"Enable/Disable registrations"},{"location":"applications/bitwarden_rs/#admin-interface","text":"To enable the Admin webinterface, set bitwarden_rs_admintoken to a secure password. When this is set you access the admin interface at /admin .","title":"Admin interface"},{"location":"applications/bitwarden_rs/#websocket-notifications","text":"To enable WebSockets notifications, an external reverse proxy is necessary, and it must be configured to do the following: - Route the /notifications/hub endpoint to the WebSocket server, by default at port 3012 , making sure to pass the Connection and Upgrade headers. (Note the port can be changed with WEBSOCKET_PORT variable) - Route everything else, including /notifications/hub/negotiate , to the standard Rocket server, by default at port 9001 . Then you need to enable WebSockets negotiation on the bitwarden_rs side by setting the bitwarden_rs_websocket_enabled variable to true . More information here","title":"Websocket notifications"},{"location":"applications/bitwarden_rs/#email","text":"To activate the e-mail functionality of bitwarden_rs you need to configure an smtp server connection. First, set bitwarden_rs_smtp_enabled to true , then configure the following variables, according to your existing smtp server: bitwarden_rs_smtp_host: \"\" bitwarden_rs_smtp_from: \"\" bitwarden_rs_smtp_port: \"\" bitwarden_rs_smtp_ssl: \"\" bitwarden_rs_smtp_username: \"\" bitwarden_rs_smtp_password: \"\" More information here .","title":"Email"},{"location":"applications/bitwarden_rs/#yubikey-otp-authentication","text":"To enable YubiKey authentication, you must set the variables bitwarden_rs_yubikey_server , bitwarden_rs_yubikey_id and bitwarden_rs_yubikey_key to a valid configuration, then enable it by setting bitwarden_rs_yubikey_enabled: true More information here","title":"Yubikey OTP authentication"},{"location":"applications/dokuwiki/","text":"Dokuwiki Dokuwiki - Simple to use and highly versatile Open Source wiki software that doesn't require a database Upon first install go to http://$IP:$PORT/install.php . Once you have completed the setup, restart the container, login as admin and set \"Use nice URLs\" in the admin/Configuration Settings panel to .htaccess and tick Use slash as namespace separator in URLs to enable nice URLs. You will find the webui at http://$IP:$PORT/ , for more info see Dokuwiki . This explanation was copied from the Linuxserver.io page for Dokuwiki .","title":"Dokuwiki"},{"location":"applications/dokuwiki/#dokuwiki","text":"Dokuwiki - Simple to use and highly versatile Open Source wiki software that doesn't require a database Upon first install go to http://$IP:$PORT/install.php . Once you have completed the setup, restart the container, login as admin and set \"Use nice URLs\" in the admin/Configuration Settings panel to .htaccess and tick Use slash as namespace separator in URLs to enable nice URLs. You will find the webui at http://$IP:$PORT/ , for more info see Dokuwiki . This explanation was copied from the Linuxserver.io page for Dokuwiki .","title":"Dokuwiki"},{"location":"applications/gitea/","text":"Gitea Gitea - Git with a cup of tea Visit http://$YourIP:$YourPort/install after activating Gitea to complete the installation process. You can use the following settings to customize your Gitea installation: gitea_appname: \"The name shown on your Gitea page\" gitea_runmode: \"prod or dev, use dev for testing and prod for actual use\" gitea_domain: \"Domain for your gitea instance\" gitea_disable_ssh: \"true/false\" gitea_disable_registrations: \"true/false\" gitea_require_signin: \"true/false\" When set to true, you can't access public projects without signing in.","title":"Gitea"},{"location":"applications/gitea/#gitea","text":"Gitea - Git with a cup of tea Visit http://$YourIP:$YourPort/install after activating Gitea to complete the installation process. You can use the following settings to customize your Gitea installation: gitea_appname: \"The name shown on your Gitea page\" gitea_runmode: \"prod or dev, use dev for testing and prod for actual use\" gitea_domain: \"Domain for your gitea instance\" gitea_disable_ssh: \"true/false\" gitea_disable_registrations: \"true/false\" gitea_require_signin: \"true/false\" When set to true, you can't access public projects without signing in.","title":"Gitea"},{"location":"applications/jackett/","text":"Jackett Jackett - API Support for your favorite torrent trackers. Jackett works as a proxy server: it translates queries from apps (Sonarr, Radarr, SickRage, CouchPotato, Mylar, Lidarr, DuckieTV, qBittorrent, Nefarious etc) into tracker-site-specific http queries, parses the html response, then sends results back to the requesting software. This allows for getting recent uploads (like RSS) and performing searches. Jackett is a single repository of maintained indexer scraping & translation logic - removing the burden from other apps. For information on running Jackett behind a reverse proxy, see here .","title":"Jackett"},{"location":"applications/jackett/#jackett","text":"Jackett - API Support for your favorite torrent trackers. Jackett works as a proxy server: it translates queries from apps (Sonarr, Radarr, SickRage, CouchPotato, Mylar, Lidarr, DuckieTV, qBittorrent, Nefarious etc) into tracker-site-specific http queries, parses the html response, then sends results back to the requesting software. This allows for getting recent uploads (like RSS) and performing searches. Jackett is a single repository of maintained indexer scraping & translation logic - removing the burden from other apps. For information on running Jackett behind a reverse proxy, see here .","title":"Jackett"},{"location":"applications/lancache/","text":"Lancache Lancache - Cache your video game downloads and operating system updates so you only have to download them once If you do not run your own DNS server, you can set lancache_dns_enabled to true and use the integrated DNS server. You can also use the variables lancache_limits_memory , lancache_limits_size , lancache_limits_age to set the caches memory use, maximum disk space use and maximum age for cached files respectively. If you run your own DNS server, you can get all the domains for the supported CDNs from here . Redirect those to your CharjaBox IP (and set up a reverse proxy for those domains if not using port 80). A simple example setup using BIND and Nginx with the Cache running on 192.168.1.22 on port 6666 could look like this: BIND db.rpz: TTL 60 @ IN SOA localhost. root.localhost. ( 2015112501 ; serial 1h ; refresh 30m ; retry 1w ; expiry 30m) ; minimum IN NS localhost. localhost A 127.0.0.1 *.content.steampowered.com A 192.168.1.22 content1.steampowered.com A 192.168.1.22 content2.steampowered.com A 192.168.1.22 content3.steampowered.com A 192.168.1.22 content4.steampowered.com A 192.168.1.22 content5.steampowered.com A 192.168.1.22 content6.steampowered.com A 192.168.1.22 content7.steampowered.com A 192.168.1.22 content8.steampowered.com A 192.168.1.22 cs.steampowered.com A 192.168.1.22 steamcontent.com A 192.168.1.22 client-download.steampowered.com A 192.168.1.22 *.hsar.steampowered.com.edgesuite.net A 192.168.1.22 *.akamai.steamstatic.com A 192.168.1.22 content-origin.steampowered.com A 192.168.1.22 clientconfig.akamai.steamtransparent.com A 192.168.1.22 steampipe.akamaized.net A 192.168.1.22 edgecast.steamstatic.com A 192.168.1.22 steam.apac.qtlglb.com.mwcloudcdn.com A 192.168.1.22 *.cs.steampowered.com A 192.168.1.22 *.cm.steampowered.com A 192.168.1.22 *.edgecast.steamstatic.com A 192.168.1.22 *.steamcontent.com A 192.168.1.22 cdn1-sea1.valve.net A 192.168.1.22 cdn2-sea1.valve.net A 192.168.1.22 *.steam-content-dnld-1.apac-1-cdn.cqloud.com A 192.168.1.22 *.steam-content-dnld-1.eu-c1-cdn.cqloud.com A 192.168.1.22 steam.apac.qtlglb.com A 192.168.1.22 edge.steam-dns.top.comcast.net A 192.168.1.22 edge.steam-dns-2.top.comcast.net A 192.168.1.22 steam.naeu.qtlglb.com A 192.168.1.22 steampipe-kr.akamaized.net A 192.168.1.22 steam.ix.asn.au A 192.168.1.22 steam.eca.qtlglb.com A 192.168.1.22 steam.cdn.on.net A 192.168.1.22 update5.dota2.wmsj.cn A 192.168.1.22 update2.dota2.wmsj.cn A 192.168.1.22 update6.dota2.wmsj.cn A 192.168.1.22 update3.dota2.wmsj.cn A 192.168.1.22 update1.dota2.wmsj.cn A 192.168.1.22 update4.dota2.wmsj.cn A 192.168.1.22 update5.csgo.wmsj.cn A 192.168.1.22 update2.csgo.wmsj.cn A 192.168.1.22 update4.csgo.wmsj.cn A 192.168.1.22 update3.csgo.wmsj.cn A 192.168.1.22 update6.csgo.wmsj.cn A 192.168.1.22 update1.csgo.wmsj.cn A 192.168.1.22 st.dl.bscstorage.net A 192.168.1.22 cdn.mileweb.cs.steampowered.com.8686c.com A 192.168.1.22 Nginx site config: server { listen 80; listen 443; server_name *.content.steampowered.com content1.steampowered.com content2.steampowered.com content3.steampowered.com content4.steampowered.com content5.steampowered.com content6.steampowered.com content7.steampowered.com content8.steampowered.com cs.steampowered.com steamcontent.com client-download.steampowered.com *.hsar.steampowered.com.edgesuite.net *.akamai.steamstatic.com content-origin.steampowered.com clientconfig.akamai.steamtransparent.com steampipe.akamaized.net edgecast.steamstatic.com steam.apac.qtlglb.com.mwcloudcdn.com *.cs.steampowered.com *.cm.steampowered.com *.edgecast.steamstatic.com *.steamcontent.com cdn1-sea1.valve.net cdn2-sea1.valve.net *.steam-content-dnld-1.apac-1-cdn.cqloud.com *.steam-content-dnld-1.eu-c1-cdn.cqloud.com steam.apac.qtlglb.com edge.steam-dns.top.comcast.net edge.steam-dns-2.top.comcast.net steam.naeu.qtlglb.com steampipe-kr.akamaized.net steam.ix.asn.au steam.eca.qtlglb.com steam.cdn.on.net update5.dota2.wmsj.cn update2.dota2.wmsj.cn update6.dota2.wmsj.cn update3.dota2.wmsj.cn update1.dota2.wmsj.cn update4.dota2.wmsj.cn update5.csgo.wmsj.cn update2.csgo.wmsj.cn update4.csgo.wmsj.cn update3.csgo.wmsj.cn update6.csgo.wmsj.cn update1.csgo.wmsj.cn st.dl.bscstorage.net cdn.mileweb.cs.steampowered.com.8686c.com; location / { include proxy_params; proxy_pass http://192.168.1.22:6666; } }","title":"Lancache"},{"location":"applications/lancache/#lancache","text":"Lancache - Cache your video game downloads and operating system updates so you only have to download them once If you do not run your own DNS server, you can set lancache_dns_enabled to true and use the integrated DNS server. You can also use the variables lancache_limits_memory , lancache_limits_size , lancache_limits_age to set the caches memory use, maximum disk space use and maximum age for cached files respectively. If you run your own DNS server, you can get all the domains for the supported CDNs from here . Redirect those to your CharjaBox IP (and set up a reverse proxy for those domains if not using port 80). A simple example setup using BIND and Nginx with the Cache running on 192.168.1.22 on port 6666 could look like this: BIND db.rpz: TTL 60 @ IN SOA localhost. root.localhost. ( 2015112501 ; serial 1h ; refresh 30m ; retry 1w ; expiry 30m) ; minimum IN NS localhost. localhost A 127.0.0.1 *.content.steampowered.com A 192.168.1.22 content1.steampowered.com A 192.168.1.22 content2.steampowered.com A 192.168.1.22 content3.steampowered.com A 192.168.1.22 content4.steampowered.com A 192.168.1.22 content5.steampowered.com A 192.168.1.22 content6.steampowered.com A 192.168.1.22 content7.steampowered.com A 192.168.1.22 content8.steampowered.com A 192.168.1.22 cs.steampowered.com A 192.168.1.22 steamcontent.com A 192.168.1.22 client-download.steampowered.com A 192.168.1.22 *.hsar.steampowered.com.edgesuite.net A 192.168.1.22 *.akamai.steamstatic.com A 192.168.1.22 content-origin.steampowered.com A 192.168.1.22 clientconfig.akamai.steamtransparent.com A 192.168.1.22 steampipe.akamaized.net A 192.168.1.22 edgecast.steamstatic.com A 192.168.1.22 steam.apac.qtlglb.com.mwcloudcdn.com A 192.168.1.22 *.cs.steampowered.com A 192.168.1.22 *.cm.steampowered.com A 192.168.1.22 *.edgecast.steamstatic.com A 192.168.1.22 *.steamcontent.com A 192.168.1.22 cdn1-sea1.valve.net A 192.168.1.22 cdn2-sea1.valve.net A 192.168.1.22 *.steam-content-dnld-1.apac-1-cdn.cqloud.com A 192.168.1.22 *.steam-content-dnld-1.eu-c1-cdn.cqloud.com A 192.168.1.22 steam.apac.qtlglb.com A 192.168.1.22 edge.steam-dns.top.comcast.net A 192.168.1.22 edge.steam-dns-2.top.comcast.net A 192.168.1.22 steam.naeu.qtlglb.com A 192.168.1.22 steampipe-kr.akamaized.net A 192.168.1.22 steam.ix.asn.au A 192.168.1.22 steam.eca.qtlglb.com A 192.168.1.22 steam.cdn.on.net A 192.168.1.22 update5.dota2.wmsj.cn A 192.168.1.22 update2.dota2.wmsj.cn A 192.168.1.22 update6.dota2.wmsj.cn A 192.168.1.22 update3.dota2.wmsj.cn A 192.168.1.22 update1.dota2.wmsj.cn A 192.168.1.22 update4.dota2.wmsj.cn A 192.168.1.22 update5.csgo.wmsj.cn A 192.168.1.22 update2.csgo.wmsj.cn A 192.168.1.22 update4.csgo.wmsj.cn A 192.168.1.22 update3.csgo.wmsj.cn A 192.168.1.22 update6.csgo.wmsj.cn A 192.168.1.22 update1.csgo.wmsj.cn A 192.168.1.22 st.dl.bscstorage.net A 192.168.1.22 cdn.mileweb.cs.steampowered.com.8686c.com A 192.168.1.22 Nginx site config: server { listen 80; listen 443; server_name *.content.steampowered.com content1.steampowered.com content2.steampowered.com content3.steampowered.com content4.steampowered.com content5.steampowered.com content6.steampowered.com content7.steampowered.com content8.steampowered.com cs.steampowered.com steamcontent.com client-download.steampowered.com *.hsar.steampowered.com.edgesuite.net *.akamai.steamstatic.com content-origin.steampowered.com clientconfig.akamai.steamtransparent.com steampipe.akamaized.net edgecast.steamstatic.com steam.apac.qtlglb.com.mwcloudcdn.com *.cs.steampowered.com *.cm.steampowered.com *.edgecast.steamstatic.com *.steamcontent.com cdn1-sea1.valve.net cdn2-sea1.valve.net *.steam-content-dnld-1.apac-1-cdn.cqloud.com *.steam-content-dnld-1.eu-c1-cdn.cqloud.com steam.apac.qtlglb.com edge.steam-dns.top.comcast.net edge.steam-dns-2.top.comcast.net steam.naeu.qtlglb.com steampipe-kr.akamaized.net steam.ix.asn.au steam.eca.qtlglb.com steam.cdn.on.net update5.dota2.wmsj.cn update2.dota2.wmsj.cn update6.dota2.wmsj.cn update3.dota2.wmsj.cn update1.dota2.wmsj.cn update4.dota2.wmsj.cn update5.csgo.wmsj.cn update2.csgo.wmsj.cn update4.csgo.wmsj.cn update3.csgo.wmsj.cn update6.csgo.wmsj.cn update1.csgo.wmsj.cn st.dl.bscstorage.net cdn.mileweb.cs.steampowered.com.8686c.com; location / { include proxy_params; proxy_pass http://192.168.1.22:6666; } }","title":"Lancache"},{"location":"applications/lidarr/","text":"Lidarr Lidarr - Manage your music collection Set lidarr_data_directory to the folder where downloaded .torrent files should get stored. Lidarr uses the path set in charjabox_music_directory in charjabox_general.yml to access your music collection.","title":"Lidarr"},{"location":"applications/lidarr/#lidarr","text":"Lidarr - Manage your music collection Set lidarr_data_directory to the folder where downloaded .torrent files should get stored. Lidarr uses the path set in charjabox_music_directory in charjabox_general.yml to access your music collection.","title":"Lidarr"},{"location":"applications/nginx/","text":"Nginx Nginx - Open source web server and a reverse proxy server nginx_config_directory binds to /etc/nginx , for information on how to configure nginx see the nginx documentation . nginx_data_directory binds to /var/www/ , put everything the webserver should serve in here. For information on how to setup nginx as a reverse proxy for your other apps, see this documentation page .","title":"Nginx"},{"location":"applications/nginx/#nginx","text":"Nginx - Open source web server and a reverse proxy server nginx_config_directory binds to /etc/nginx , for information on how to configure nginx see the nginx documentation . nginx_data_directory binds to /var/www/ , put everything the webserver should serve in here. For information on how to setup nginx as a reverse proxy for your other apps, see this documentation page .","title":"Nginx"},{"location":"applications/plex/","text":"Plex Plex - Your very own personal streaming service You can set the paths to your media folders in the variables plex_music_directory , plex_tv_directory , and plex_movies_directory . To automatically add your server to your account, generate a claim token here and insert that token into the plex_token variable. Please note that the claim token expires after 5 minutes, so generate it right before running the playbook. After the server is set up you can visit the Plex webinterface via the official Plex website or port 32400 on your server. Changing the port for Plex can lead to some difficulties with the apps, so it is not encouraged to do that. Once you are on the webinterface, you can do your first time setup and let Plex scan through your media files.","title":"Plex"},{"location":"applications/plex/#plex","text":"Plex - Your very own personal streaming service You can set the paths to your media folders in the variables plex_music_directory , plex_tv_directory , and plex_movies_directory . To automatically add your server to your account, generate a claim token here and insert that token into the plex_token variable. Please note that the claim token expires after 5 minutes, so generate it right before running the playbook. After the server is set up you can visit the Plex webinterface via the official Plex website or port 32400 on your server. Changing the port for Plex can lead to some difficulties with the apps, so it is not encouraged to do that. Once you are on the webinterface, you can do your first time setup and let Plex scan through your media files.","title":"Plex"},{"location":"applications/portainer/","text":"Portainer Portainer - Web Interface for managing Docker containers You can use Portainer to get a simple overview over your running containers, to access logs and container shells and more, without needing a terminal. After enabling Portainer, go to the webinterface (by default the port is 9000) and create your admin user. Then choose local as an endpoint to manage your local docker install.","title":"Portainer"},{"location":"applications/portainer/#portainer","text":"Portainer - Web Interface for managing Docker containers You can use Portainer to get a simple overview over your running containers, to access logs and container shells and more, without needing a terminal. After enabling Portainer, go to the webinterface (by default the port is 9000) and create your admin user. Then choose local as an endpoint to manage your local docker install.","title":"Portainer"},{"location":"applications/radarr/","text":"Radarr Radarr - Manage your Movie collection Set radarr_data_directory to the folder where downloaded .torrent files should get stored. Radarr uses the path set in charjabox_movies_directory in charjabox_general.yml to access your movie collection.","title":"Radarr"},{"location":"applications/radarr/#radarr","text":"Radarr - Manage your Movie collection Set radarr_data_directory to the folder where downloaded .torrent files should get stored. Radarr uses the path set in charjabox_movies_directory in charjabox_general.yml to access your movie collection.","title":"Radarr"},{"location":"applications/rtorrent/","text":"r(u)Torrent rtorrent - Text-based ncurses BitTorrent client ruTorrent - Web front-end for the popular Bittorrent client rtorrent Settings for rtorrent can be changed in rtorrent_config_directory/rtorrent/rtorrent.rc . \"Settings, changed by the user through the \"Settings\" panel in ruTorrent, are valid until rtorrent restart. After which all settings will be set according to the rtorrent config file (/config/rtorrent/rtorrent.rc),this is a limitation of the actual apps themselves.\" To set a password for rutorrent add the auth configuration to rtorrent_config_directory/nginx/nginx.conf , see here for more information.","title":"r(u)Torrent"},{"location":"applications/rtorrent/#rutorrent","text":"rtorrent - Text-based ncurses BitTorrent client ruTorrent - Web front-end for the popular Bittorrent client rtorrent Settings for rtorrent can be changed in rtorrent_config_directory/rtorrent/rtorrent.rc . \"Settings, changed by the user through the \"Settings\" panel in ruTorrent, are valid until rtorrent restart. After which all settings will be set according to the rtorrent config file (/config/rtorrent/rtorrent.rc),this is a limitation of the actual apps themselves.\" To set a password for rutorrent add the auth configuration to rtorrent_config_directory/nginx/nginx.conf , see here for more information.","title":"r(u)Torrent"},{"location":"applications/smb/","text":"Samba CharjaBox uses the bertvv.samba role to set up and configure SMB. Your shares are set up in smb.yml in your settings folder. The default/example setup looks like this and sets up a \"Media\" Share readable and writable by guests: samba_shares: - name: Media comment: 'Media Share' guest_ok: yes public: yes writable: yes browsable: yes path: \"/mnt/Media\" These are the most important options: - name (required): Name of your share comment: 'Comment to describe your share' guest_ok: yes/no # Allow guest access public: yes/no # Controls read access for guest users writable: yes/no # Writable for guests. browsable: yes/no # Controls whether this share appears in file browser. path: \"/mnt/Media\" # Path to the share group: $group # The user group files in the share will be added to. owner: $user # The owner of the share path valid_users: $user # Controls read access for registered users. Use the syntax of the corresponding Samba setting. write_list: $user # Controls write access for registered users. Use the syntax of the corresponding Samba setting. For more options and information read the README for the SMB role. If you can't access your Shares on a recent Mac, try setting samba_mitigate_cve_2017_7494 to false .","title":"Samba"},{"location":"applications/smb/#samba","text":"CharjaBox uses the bertvv.samba role to set up and configure SMB. Your shares are set up in smb.yml in your settings folder. The default/example setup looks like this and sets up a \"Media\" Share readable and writable by guests: samba_shares: - name: Media comment: 'Media Share' guest_ok: yes public: yes writable: yes browsable: yes path: \"/mnt/Media\" These are the most important options: - name (required): Name of your share comment: 'Comment to describe your share' guest_ok: yes/no # Allow guest access public: yes/no # Controls read access for guest users writable: yes/no # Writable for guests. browsable: yes/no # Controls whether this share appears in file browser. path: \"/mnt/Media\" # Path to the share group: $group # The user group files in the share will be added to. owner: $user # The owner of the share path valid_users: $user # Controls read access for registered users. Use the syntax of the corresponding Samba setting. write_list: $user # Controls write access for registered users. Use the syntax of the corresponding Samba setting. For more options and information read the README for the SMB role. If you can't access your Shares on a recent Mac, try setting samba_mitigate_cve_2017_7494 to false .","title":"Samba"},{"location":"applications/sonarr/","text":"Sonarr Sonarr - Manage your TV collection Set sonarr_data_directory to the folder where downloaded .torrent files should get stored. Sonarr uses the path set in charjabox_tv_directory in charjabox_general.yml to access your TV collection.","title":"Sonarr"},{"location":"applications/sonarr/#sonarr","text":"Sonarr - Manage your TV collection Set sonarr_data_directory to the folder where downloaded .torrent files should get stored. Sonarr uses the path set in charjabox_tv_directory in charjabox_general.yml to access your TV collection.","title":"Sonarr"},{"location":"applications/timemachine/","text":"Time machine Time machine - Backup your macOS devices over the network Time machine makes it possible to backup your macOS devices over the network. Set timemachine_sharename to configure the name you see when configuring time machine. Please set timemachine_password to something random. This is the password you use to connect to the time machine server. The user name is timemachine . timemachine_sizelimit is the maximum amount of space Time Machine can use for backups in MB . 0 means no limit.","title":"Time machine"},{"location":"applications/timemachine/#time-machine","text":"Time machine - Backup your macOS devices over the network Time machine makes it possible to backup your macOS devices over the network. Set timemachine_sharename to configure the name you see when configuring time machine. Please set timemachine_password to something random. This is the password you use to connect to the time machine server. The user name is timemachine . timemachine_sizelimit is the maximum amount of space Time Machine can use for backups in MB . 0 means no limit.","title":"Time machine"},{"location":"applications/traefik/","text":"Traefik Traefik - Automate reverse proxy access to your server To enable Traefik set traefik_enabled to true , then set $appname_traefik_enabled to true for every app you want to be proxied. To enable acess to Traefik's webinterface at traefik_webinterface_port set traefik_dashboard_enabled and traefik_insecure_api to true . Secure acess will be implemented soon. SSL configuration and automated Let's Encrypt certificates will also be added soon.","title":"Traefik"},{"location":"applications/traefik/#traefik","text":"Traefik - Automate reverse proxy access to your server To enable Traefik set traefik_enabled to true , then set $appname_traefik_enabled to true for every app you want to be proxied. To enable acess to Traefik's webinterface at traefik_webinterface_port set traefik_dashboard_enabled and traefik_insecure_api to true . Secure acess will be implemented soon. SSL configuration and automated Let's Encrypt certificates will also be added soon.","title":"Traefik"}]}